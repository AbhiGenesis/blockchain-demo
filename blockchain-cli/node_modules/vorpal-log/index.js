// Generated by CoffeeScript 1.10.0
(function() {
  var chalk, util;

  chalk = require('chalk');

  util = require('util');

  module.exports = function(vorpal, options) {
    var defaultFormatters, formatter, logger, name;
    logger = {
      options: options != null ? options : {},
      filter: {},
      formatters: {},
      printDate: function() {
        var date, normalisedDate;
        if (logger.options.printDate === true) {
          date = new Date;
          normalisedDate = new Date(date - (date.getTimezoneOffset() * 60 * 1000));
          return chalk.grey('[' + normalisedDate.toISOString().replace(/T/, ' ').replace(/\..+/, '') + ']') + ' ';
        } else {
          return '';
        }
      },
      doLog: function(formatter, msg) {
        if (logger.filter(formatter)) {
          if (vorpal.activeCommand != null) {
            return vorpal.activeCommand.log(formatter.format(msg));
          } else {
            return vorpal.log(formatter.format(msg));
          }
        }
      },
      setFilter: function(filter) {
        var error, error1, lvl;
        if (typeof filter === 'function') {
          return logger.filter = filter;
        } else if (typeof filter === 'number') {
          return logger.filter = function(formatter) {
            return formatter.level >= filter;
          };
        } else if (typeof filter === 'string') {
          try {
            lvl = logger.formatters[filter].level;
            return logger.filter = function(formatter) {
              return formatter.level >= lvl;
            };
          } catch (error1) {
            error = error1;
            throw new TypeError('Not the name of a formatter');
          }
        } else {
          throw new TypeError('filter must be a number, the name of a formatter, or a filter function');
        }
      },
      printMsg: function(msg) {
        if (vorpal.activeCommand != null) {
          return vorpal.activeCommand.log(msg);
        } else {
          return vorpal.log(msg);
        }
      },
      addFormatter: function(name, level, format) {
        logger.formatters[name] = {
          level: level,
          format: format
        };
        return logger[name] = function(msg) {
          return logger.doLog(logger.formatters[name], msg);
        };
      }
    };
    vorpal.logger = logger;
    vorpal.command('loglevel <level>').description('set the log level').hidden().action(function(args, cb) {
      var error1;
      try {
        logger.setFilter(args.level);
      } catch (error1) {
        logger.error(args.level + " is not a valid loglevel.");
      }
      return cb();
    });
    defaultFormatters = {
      debug: {
        level: 10,
        format: function(msg) {
          if (typeof msg === 'string') {
            if (logger.options.preformat != null) {
              msg = logger.options.preformat(msg);
            }
          } else {
            msg = util.inspect(msg);
          }
          return "" + (logger.printDate()) + (chalk.dim('[debug]')) + " " + msg;
        }
      },
      log: {
        level: 20,
        format: function(msg) {
          if (typeof msg === 'string') {
            if (logger.options.preformat != null) {
              msg = logger.options.preformat(msg);
            }
          } else {
            msg = util.inspect(msg);
          }
          return "" + (logger.printDate()) + msg;
        }
      },
      info: {
        level: 20,
        format: function(msg) {
          if (typeof msg === 'string') {
            if (logger.options.preformat != null) {
              msg = logger.options.preformat(msg);
            }
          } else {
            msg = util.inspect(msg);
          }
          return "" + (logger.printDate()) + (chalk.blue('[info]')) + " " + msg;
        }
      },
      confirm: {
        level: 20,
        format: function(msg) {
          if (typeof msg === 'string') {
            if (logger.options.preformat != null) {
              msg = logger.options.preformat(msg);
            }
          } else {
            msg = util.inspect(msg);
          }
          return "" + (logger.printDate()) + (chalk.green('[confirmation]')) + " " + msg;
        }
      },
      warn: {
        level: 30,
        format: function(msg) {
          if (typeof msg === 'string') {
            if (logger.options.preformat != null) {
              msg = logger.options.preformat(msg);
            }
          } else {
            msg = util.inspect(msg);
          }
          return "" + (logger.printDate()) + (chalk.yellow('[warning]')) + " " + msg;
        }
      },
      error: {
        level: 40,
        format: function(msg) {
          if (typeof msg === 'string') {
            if (logger.options.preformat != null) {
              msg = logger.options.preformat(msg);
            }
          } else {
            msg = util.inspect(msg);
          }
          return "" + (logger.printDate()) + (chalk.red('[error]')) + " " + msg;
        }
      },
      fatal: {
        level: 50,
        format: function(msg) {
          if (typeof msg === 'string') {
            if (logger.options.preformat != null) {
              msg = logger.options.preformat(msg);
            }
          } else {
            msg = util.inspect(msg);
          }
          return "" + (logger.printDate()) + (chalk.bgRed('[fatal]')) + " " + msg;
        }
      }
    };
    for (name in defaultFormatters) {
      formatter = defaultFormatters[name];
      logger.addFormatter(name, formatter.level, formatter.format);
    }
    return logger.setFilter('info');
  };

}).call(this);
